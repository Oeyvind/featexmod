#!/usr/bin/python
# -*- coding: latin-1 -*-

#    Copyright 2016 Oeyvind Brandtsegg 
#
#    This file is part of the Feature-Extract-Modulator package
#
#    The Feature-Extract-Modulator is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License version 3 
#    as published by the Free Software Foundation.
#
#    The Feature-Extract-Modulator is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with The Feature-Extract-Modulator package.  
#    If not, see <http://www.gnu.org/licenses/>.


import re

### These need to be updated when we add or remove parameters, then autogenerate new code and all relevant files should be updated with the new paramter set

analysis_parms = ["rms", "rms_dB", "transient", "trans_dens", "env_crest", "env_dyn", "pitch", 
"s_centroid", "s_spread", "s_skewness", "s_kurtosis", "s_flatness", "s_crest", "s_flux", 
"rhythm_irreg", "rhythm_cons", "rhyt_con_dev", "rhyt_ratio1", "rhyt_ratio2", "rhyt_ratio3", 
"rac_1st_v", "rac_clos_v", "rac_max_v", "rac_max2_v", "rac_max3_v", "rac_1st_tim", "rac_clos_tim", "rac_max_tim", "rac_max2_tim", "rac_max3_tim", 
"grid_subdiv", "gridness", "ra_flux", "ra_crest", 
"mfcc1", "mfcc2", "mfcc3", "mfcc_diff"] 

analysis_parms_string = ''''''
for item in analysis_parms: analysis_parms_string += '\"'+item+'", '
analysis_parms_string = analysis_parms_string[:-2]
print analysis_parms_string, '\n'

csound_parms = ["krms", "krms_dB_n", "kamp_trans_hold", "katransDensEnv_n", "kenv_crest1", "kenv_dyn", "kpitch_n", 
"kcentroid_n", "kspread_n", "kskewness_n", "kurtosis_n", "kflatness_n", "kcrest_n", "kflux_n", 
"krhythm_irregularity", "krhythm_consonance", "krhythm_consonance_deviation", "krhythm_ratio1", "krhythm_ratio2", "krhythm_ratio3", 
"kra_first_v", "kra_closest_v", "kra_max1_v", "kra_max2_v", "kra_max3_v", "kra_first_time", "kra_closest_time", "kra_max1_time", "kra_max2_time", "kra_max3_time",
"kgrid_subdiv", "kgridness", "kra_flux", "krhythm_ac_crest", 
"kmfcc1", "kmfcc2", "kmfcc3", "kmfccdiff"]

csound_parms_string = ''''''
for item in csound_parms: csound_parms_string += item+', '
csound_parms_string = csound_parms_string[:-2]
print csound_parms_string

# divide into sets of 25 as that seems to be the max N elements we can send with OSCsend
csound_parms1 = csound_parms[:25]
csound_parms2 = csound_parms[25:]
csound_parms_string1 = ''''''
for item in csound_parms1: csound_parms_string1 += item+', '
csound_parms_string1 = csound_parms_string1[:-2]
csound_parms_string2 = ''''''
for item in csound_parms2: csound_parms_string2 += item+', '
csound_parms_string2 = csound_parms_string2[:-2]


#######################

marker_start = '; >>>>>>> AUTOGENERATED TEXT{}: DO NOT EDIT THE FOLLOWING LINES >>>>>>>'
marker_end = '; <<<<<<< AUTOGENERATED TEXT{}: DO NOT EDIT THE PRECEDING LINES <<<<<<<'

def replace_text_between_markers(in_file, markertag, new_txt):    
    f = open(in_file, 'r')
    f_txt = f.read()
    f.close()
    updated_txt = re.sub(marker_start.format(markertag)+'(.*?)'+marker_end.format(markertag),
                         marker_start.format(markertag)+'\n'+new_txt+'\n'+marker_end.format(markertag), f_txt, flags=re.DOTALL)
    f = open(in_file, 'w')
    f.write(updated_txt)
    f.close()


#######################
start_x_pos = 30
start_y_pos = 5
plant_height = 85

plant = '''groupbox bounds({start_y}, {start_x}, 574, 81), plant("plant_{pname}"), linethickness("0"){{ 
combobox channel("source1_{pname}"), bounds(10, 12, 100, 20), items({analysis_p}), value(1), channeltype("string")
combobox channel("chan1_{pname}"), bounds(113, 12, 50, 20), items("1", "2", "3", "4"), value(1)
numberbox bounds(168, 14, 35, 15), channel("rise1_{pname}"), range(0.01, 10.0, 0.01)
numberbox bounds(206, 14, 35, 15), channel("fall1_{pname}"), range(0.01, 10.0, 0.5)
hslider bounds(243, 12, 86, 20), channel("scale1_{pname}"), range(-1.0, 1.0, 0, 1, 0.001)
button bounds(330, 12, 29, 19), channel("scale1_x_{pname}"), text("x 1","x 10")
hslider bounds(359, 12, 86, 20), channel("curve1_{pname}"), range(-5.0, 5.0, 0)

combobox channel("source2_{pname}"), bounds(10, 34, 100, 20), items({analysis_p}), value(1), channeltype("string")
combobox channel("chan2_{pname}"), bounds(113, 34, 50, 20), items("1", "2", "3", "4"), value(1)
numberbox bounds(168, 36, 35, 15), channel("rise2_{pname}"), range(0.01, 10.0, 0.01)
numberbox bounds(206, 36, 35, 15), channel("fall2_{pname}"), range(0.01, 10.0, 0.5)
hslider bounds(243, 34, 86, 20), channel("scale2_{pname}"), range(-1.0, 1.0, 0, 1, 0.001)
button bounds(330, 34, 29, 19), channel("scale2_x_{pname}"), text("x 1","x 10") 
hslider bounds(359, 34, 86, 20), channel("curve2_{pname}"), range(-5.0, 5.0, 0)

label bounds(10, 58, 100, 12), text("source"), colour(20,20,20,255)
label bounds(113, 58, 50, 12), text("chan"), colour(20,20,20,255)
label bounds(166, 58, 76, 12), text("rise/fall"), colour(20,20,20,255)
label bounds(246, 58, 110, 12), text("scale"), colour(20,20,20,255)
label bounds(362, 58, 81, 12), text("curve"), colour(20,20,20,255)

rslider bounds(443, 12, 62, 62), text("offset"), channel("offset_{pname}"), range({p_min}, {p_max}, {p_default}, {p_skew}, {p_incr}) 
combobox bounds(443, 1, 55, 12), channel("offsetx_{pname}"), items("-1", "Nornm", "+1"), , value(2), channeltype("string")

rslider bounds(504, 8, 66, 66), text("{pname}"), channel("{pname}"), range({p_min}, {p_max}, {p_default}, {p_skew}, {p_incr})
}}

'''
plantMIDI = '''groupbox bounds({start_y}, {start_x}, 720, 81), plant("plant_{pname}"), linethickness("0"){{ 
combobox channel("source1_{pname}"), bounds(10, 12, 100, 20), items({analysis_p}), value(1), channeltype("string")
combobox channel("chan1_{pname}"), bounds(113, 12, 50, 20), items("1", "2", "3", "4"), value(1)
numberbox bounds(168, 14, 35, 15), channel("rise1_{pname}"), range(0.01, 10.0, 0.01)
numberbox bounds(206, 14, 35, 15), channel("fall1_{pname}"), range(0.01, 10.0, 0.5)
hslider bounds(243, 12, 86, 20), channel("scale1_{pname}"), range(-1.0, 1.0, 0, 1, 0.001)
button bounds(330, 12, 29, 19), channel("scale1_x_{pname}"), text("x 1","x 10"), 
hslider bounds(359, 12, 86, 20), channel("curve1_{pname}"), range(-5.0, 5.0, 0)

combobox channel("source2_{pname}"), bounds(10, 34, 100, 20), items({analysis_p}), value(1), channeltype("string")
combobox channel("chan2_{pname}"), bounds(113, 34, 50, 20), items("1", "2", "3", "4"), value(1)
numberbox bounds(168, 36, 35, 15), channel("rise2_{pname}"), range(0.01, 10.0, 0.01)
numberbox bounds(206, 36, 35, 15), channel("fall2_{pname}"), range(0.01, 10.0, 0.5)
hslider bounds(243, 34, 86, 20), channel("scale2_{pname}"), range(-1.0, 1.0, 0, 1, 0.001)
button bounds(330, 34, 29, 19), channel("scale2_x_{pname}"), text("x 1","x 10"), 
hslider bounds(359, 34, 86, 20), channel("curve2_{pname}"), range(-5.0, 5.0, 0)

label bounds(10, 58, 100, 12), text("source"), colour(20,20,20,255)
label bounds(113, 58, 50, 12), text("chan"), colour(20,20,20,255)
label bounds(166, 58, 76, 12), text("rise/fall"), colour(20,20,20,255)
label bounds(246, 58, 110, 12), text("scale"), colour(20,20,20,255)
label bounds(362, 58, 81, 12), text("curve"), colour(20,20,20,255)

rslider bounds(443, 12, 62, 62), text("offset"), channel("offset_{pname}"), range({p_min}, {p_max}, {p_default}, {p_skew}, {p_incr}) 
combobox bounds(443, 1, 55, 12), channel("offsetx_{pname}"), items("-1", "Nornm", "+1"), , value(2), channeltype("string")

rslider bounds(504, 8, 66, 66), text("{pname}"), channel("{pname}"), range({p_min}, {p_max}, {p_default}, {p_skew}, {p_incr})

label bounds(580, 8, 55, 12), text("midi"), colour(20,20,20,255)
checkbox bounds(642, 8, 12, 12), text("enable"), channel("enable_{pname}"), value(1)
numberbox bounds(580, 25, 55, 15), channel("midich_{pname}"), range(1, 16, 1)
numberbox bounds(580, 42, 55, 15), channel("ctrlnum_{pname}"), range(1, 127, 1)
label bounds(642, 25, 70, 12), text("channel"), colour(20,20,20,255)
label bounds(642, 42, 70, 12), text("ctrl"), colour(20,20,20,255)

}}

'''

for effectname in ['vst_mediator', 'vst_MIDIator']:
    if effectname == 'vst_mediator':
        parameters = [('parm1', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm2', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm3', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm4', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm5', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm6', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm7', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm8', (0.0, 1.0, 0.5, 1, 0.001))
                      ]
                    # pName, (min, max, default, skew, increment)
                    # where skew is a dynamic adjustment of exp/lin/log translation if the GUI widget
                    # and increment is the smallest change allowed by the GUI widget
    
    if effectname == 'vst_MIDIator':
        parameters = [('parm1', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm2', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm3', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm4', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm5', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm6', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm7', (0.0, 1.0, 0.5, 1, 0.001)), 
                      ('parm8', (0.0, 1.0, 0.5, 1, 0.001))
                      ]
    
    
    #
    scorefile = open(effectname+'_score_events.inc', 'w')
    fractionalinstr = 0
    for p in parameters:
        fractionalinstr += 1
        scorefile.write('i4.{fracinstr:02d}	3.1	$SCORELEN "{pname}"\n'.format(fracinstr=fractionalinstr, pname=p[0]))
    
    #
    
    chn_init_file = open(effectname+'_parameter_ranges.inc', 'w')
    instr_template = '''
            instr 1
    ; list of min and max for the mappable parameters
    {}                        
            endin
    '''
    parameter_ranges = ''
    for i in range(len(parameters)):
        parm = parameters[i]
        parameter_ranges += '   chnset {}, "{}_min" \n'.format(parm[1][0], parm[0])
        parameter_ranges += '   chnset {}, "{}_max" \n'.format(parm[1][1], parm[0])
    chn_init_file.write(instr_template.format(parameter_ranges))
    
    #
    
    
    if effectname == 'vst_MIDIator': 
        plant = plantMIDI
    
    guistring = ''
    x_pos = start_x_pos
    x_pos1 = start_x_pos
    y_pos = start_y_pos
    for i in range(len(parameters)):
        parm = parameters[i]
        guistring += plant.format(start_x=x_pos, start_y=y_pos, pname=parm[0], analysis_p=analysis_parms_string, p_min=parm[1][0], p_max=parm[1][1], p_default=parm[1][2], p_skew=parm[1][3], p_incr=parm[1][4])+'\n'
        x_pos+=plant_height
    guistring += ';next x position available below plants is {}'.format(max([x_pos,x_pos1]))
    
    p_csd_name = effectname+'_interprocess.csd'
    replace_text_between_markers(p_csd_name, '', guistring)

##############
# analyzer.csd

#1
for i in range(3):
    plot = ['x','y','c'][i]
    ypos = [332, 412, 492][i]
    plotmenu = 'combobox channel("plot_{plot}"), bounds(270, {ypos}, 90, 18), items({aparms}), value(1), channeltype("string")'.format(plot=plot, ypos=ypos, aparms=analysis_parms_string)
    replace_text_between_markers('analyzer.csd', '_{}_'.format(plot), plotmenu)

##2
plotxyz = ''
plotstring = '        k{p} Plotchannel "plot_{p}", {c_parms}\n'

for plot in ['x','y','c']:
    plotxyz += plotstring.format(p=plot, c_parms=csound_parms_string)
    
replace_text_between_markers('analyzer.csd', '_plot_', plotxyz)

##############
# analyze_udos.inc

plot_udo = 'opcode Plotchannel, k, S'
for i in range(len(csound_parms)):
    plot_udo += 'k'
plot_udo += '\n    Splotchan, '+csound_parms_string+' xin \n'
plot_udo += '    Splot_x chnget Splotchan \n    kx init 0 \n'
for i in range(len(csound_parms)):
    cparm = csound_parms[i] 
    aparm = analysis_parms[i]
    plot_udo += '    kx = (strcmpk(Splot_x,\"{aparm}\") == 0 ? {cparm} : kx) \n'.format(aparm=aparm, cparm=cparm)
plot_udo += '    xout kx \n'+'    endop \n'

replace_text_between_markers('analyze_udos.inc', '', plot_udo)

##############
# analyze_send.inc

send_str = 'OSCsend kwhen, "127.0.0.1", iport$N., SoscName_a, \"'
for i in range(len(csound_parms1)):
    send_str += 'f'
send_str += '\", {}\n'.format(csound_parms_string1)
send_str += 'OSCsend kwhen, "127.0.0.1", iport$N., SoscName_b, \"'
for i in range(len(csound_parms2)):
    send_str += 'f'
send_str += '\", {}\n'.format(csound_parms_string2)

replace_text_between_markers('analyze_send.inc', '', send_str)

##############
# subscriber_receiver.inc
subscr_str = ''
for a in analysis_parms:
    subscr_str += 'S{a} sprintf '.format(a=a)+'{{'+a+'%i}}, isource_chan \n'
subscr_str += 'SoscName_a sprintf {{/%s_a_%i}}, "analysis", isource_chan \n'
subscr_str += 'SoscName_b sprintf {{/%s_b_%i}}, "analysis", isource_chan \n'
for c in csound_parms:
    subscr_str += '{} init 0 \n'.format(c)    
subscr_str += 'nxt_val: \n'

subscr_str += 'kk1 OSClisten gihandle, SoscName_a, \"'
for i in range(len(csound_parms1)):
    subscr_str += 'f'
subscr_str += '\", {} \n'.format(csound_parms_string1)

subscr_str += 'kk2 OSClisten gihandle, SoscName_b, \"'
for i in range(len(csound_parms2)):
    subscr_str += 'f'
subscr_str += '\", {} \n'.format(csound_parms_string2)

for i in range(len(csound_parms)):
    cparm = csound_parms[i] 
    aparm = analysis_parms[i]
    subscr_str += 'chnset {cparm}, S{aparm} \n'.format(aparm=aparm, cparm=cparm)
    
replace_text_between_markers('subscriber_receiver.inc', '', subscr_str)

##############

